---
apiVersion: "v1"
kind: "Service"
metadata:
  labels:
    k8s-app: zipkin-mysql
  name: "zipkin-mysql"
  namespace: elk
spec:
  ports:
  - port: 3306
    protocol: "TCP"
    targetPort: 3306
  selector:
    k8s-app: zipkin-mysql
  type: "LoadBalancer"
---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  labels:
    k8s-app: zipkin-mysql
  name: "zipkin-mysql-cnf"
  namespace: elk
data:
  custom.cnf: |
    [mysqld]
    sql-mode=""
---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  labels:
    k8s-app: zipkin-mysql
  name: "zipkin-mysql-initdb"
  namespace: elk
data:
  init.sql: |
    CREATE TABLE IF NOT EXISTS zipkin_spans (
      `trace_id` BIGINT NOT NULL,
      `id` BIGINT NOT NULL,
      `name` VARCHAR(255) NOT NULL,
      `parent_id` BIGINT,
      `debug` BIT(1),
      `start_ts` BIGINT COMMENT 'Span.timestamp(): epoch micros used for endTs query and to implement TTL',
      `duration` BIGINT COMMENT 'Span.duration(): micros used for minDuration and maxDuration query'
    ) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;
    ALTER TABLE zipkin_spans ADD UNIQUE KEY(`trace_id`, `id`) COMMENT 'ignore insert on duplicate';
    ALTER TABLE zipkin_spans ADD INDEX(`trace_id`, `id`) COMMENT 'for joining with zipkin_annotations';
    ALTER TABLE zipkin_spans ADD INDEX(`trace_id`) COMMENT 'for getTracesByIds';
    ALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT 'for getTraces and getSpanNames';
    ALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT 'for getTraces ordering and range';
    ALTER TABLE zipkin_spans ADD `remote_service_name` VARCHAR(255);
    CREATE TABLE IF NOT EXISTS zipkin_annotations (
      `trace_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.trace_id',
      `span_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.id',
      `a_key` VARCHAR(255) NOT NULL COMMENT 'BinaryAnnotation.key or Annotation.value if type == -1',
      `a_value` BLOB COMMENT 'BinaryAnnotation.value(), which must be smaller than 64KB',
      `a_type` INT NOT NULL COMMENT 'BinaryAnnotation.type() or -1 if Annotation',
      `a_timestamp` BIGINT COMMENT 'Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp',
      `endpoint_ipv4` INT COMMENT 'Null when Binary/Annotation.endpoint is null',
      `endpoint_ipv6` BINARY(16) COMMENT 'Null when Binary/Annotation.endpoint is null, or no IPv6 address',
      `endpoint_port` SMALLINT COMMENT 'Null when Binary/Annotation.endpoint is null',
      `endpoint_service_name` VARCHAR(255) COMMENT 'Null when Binary/Annotation.endpoint is null'
    ) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;
    ALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT 'Ignore insert on duplicate';
    ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`) COMMENT 'for joining with zipkin_spans';
    ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`) COMMENT 'for getTraces/ByIds';
    ALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT 'for getTraces and getServiceNames';
    ALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT 'for getTraces';
    ALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT 'for getTraces';
    CREATE TABLE IF NOT EXISTS zipkin_dependencies (
      `day` DATE NOT NULL,
      `parent` VARCHAR(255) NOT NULL,
      `child` VARCHAR(255) NOT NULL,
      `call_count` BIGINT
    ) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;
    ALTER TABLE zipkin_dependencies ADD UNIQUE KEY(`day`, `parent`, `child`);
    GRANT SELECT, INSERT, UPDATE, DELETE ON zipkin.* TO zipkin@'%' IDENTIFIED BY 'zipkin' WITH GRANT OPTION ;
    FLUSH PRIVILEGES;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: zipkin-mysql
  name: "zipkin-mysql"
  namespace: elk
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: zipkin-mysql
  template:
    metadata:
      labels:
        k8s-app: zipkin-mysql
    spec:
      containers:
      - env:
        - name: "MYSQL_USER"
          value: "zipkin"
        - name: "MYSQL_PASSWORD"
          value: "zipkin"
        - name: "MYSQL_ROOT_PASSWORD"
          value: "zipkin"
        - name: "MYSQL_DATABASE"
          value: "zipkin"
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        image: "mysql:5.7"
        name: "zipkin-mysql"
        args:
          - "--ignore-db-dir=lost+found"
        readinessProbe:
          initialDelaySeconds: 5
          tcpSocket:
            port: 3306
        resources:
          limits:
            cpu: "0"
            memory: "0"
          requests:
            cpu: "0"
            memory: "0"
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        - name: mysql-init-script
          mountPath: /docker-entrypoint-initdb.d/
        - name:  mysql-confd
          mountPath: /etc/mysql/conf.d/
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-data
      - name: mysql-init-script
        configMap:
          name: zipkin-mysql-initdb
      - name: mysql-confd
        configMap:
          name: zipkin-mysql-cnf
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-data
  namespace: elk
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: elk
  resources:
    requests:
      storage: 10Gi
